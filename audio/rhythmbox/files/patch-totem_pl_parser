diff -urN plugins/generic-player/rb-generic-player-playlist-source.c plugins/generic-player/rb-generic-player-playlist-source.c
--- plugins/generic-player/rb-generic-player-playlist-source.c
+++ plugins/generic-player/rb-generic-player-playlist-source.c
@@ -49,6 +49,12 @@ typedef struct
 	gboolean loading;
 } RBGenericPlayerPlaylistSourcePrivate;
 
+typedef struct
+{
+	RBGenericPlayerPlaylistSource *source;
+	TotemPlPlaylist *playlist;
+} SavePlaylistData;
+
 RB_PLUGIN_DEFINE_TYPE(RBGenericPlayerPlaylistSource,
 		      rb_generic_player_playlist_source,
 		      RB_TYPE_STATIC_PLAYLIST_SOURCE)
@@ -69,26 +75,37 @@ impl_save_to_xml (RBPlaylistSource *source, xmlNodePtr node)
 	/* do nothing; just to prevent weirdness */
 }
 
-static void
-save_playlist_entry (GtkTreeModel *model, GtkTreeIter *iter,
-		     char **uri, char **title,
-		     gboolean *custom_title,
-		     RBGenericPlayerPlaylistSource *source)
+static gboolean
+save_playlist_foreach (GtkTreeModel *model,
+		       GtkTreePath *path,
+		       GtkTreeIter *iter,
+		       gpointer user_data)
 {
-	RBGenericPlayerPlaylistSourcePrivate *priv = GET_PRIVATE (source);
+	SavePlaylistData *data = user_data;
+	RBGenericPlayerPlaylistSourcePrivate *priv = GET_PRIVATE (data->source);
 	RhythmDBEntry *entry;
-	const char *host_uri;
+	TotemPlPlaylistIter pl_iter;
+	const char *host_uri, *title;
+	gchar *uri;
 
 	entry = rhythmdb_query_model_iter_to_entry (RHYTHMDB_QUERY_MODEL (model),
 						    iter);
 	if (entry == NULL) {
-		return;
+		return FALSE;
 	}
 
 	host_uri = rhythmdb_entry_get_string (entry, RHYTHMDB_PROP_LOCATION);
-	*uri = rb_generic_player_source_uri_to_playlist_uri (priv->player_source, host_uri);
-	*title = rhythmdb_entry_dup_string (entry, RHYTHMDB_PROP_TITLE);
-	*custom_title = TRUE;
+	uri = rb_generic_player_source_uri_to_playlist_uri (priv->player_source, host_uri);
+	title = rhythmdb_entry_get_string (entry, RHYTHMDB_PROP_TITLE);
+
+	totem_pl_playlist_append (data->playlist, &pl_iter);
+	totem_pl_playlist_set (data->playlist, &pl_iter,
+			       TOTEM_PL_PARSER_FIELD_URI, uri,
+			       TOTEM_PL_PARSER_FIELD_TITLE, title,
+			       NULL);
+	g_free (uri);
+
+	return FALSE;
 }
 
 /* this probably belongs more in totem than here */
@@ -119,11 +136,14 @@ save_playlist (RBGenericPlayerPlaylistSource *source)
 {
 	TotemPlParser *parser;
 	TotemPlParserType playlist_type;
+	TotemPlPlaylist *playlist;
 	RhythmDBQueryModel *query_model;
 	char *name;
 	char *temp_uri;
 	GError *error = NULL;
 	RBGenericPlayerPlaylistSourcePrivate *priv = GET_PRIVATE (source);
+	SavePlaylistData data;
+	GFile *file;
 
 	priv->save_playlist_id = 0;
 	playlist_type = rb_generic_player_source_get_playlist_format (priv->player_source);
@@ -173,41 +193,50 @@ save_playlist (RBGenericPlayerPlaylistSource *source)
 	}
 
 	temp_uri = g_strdup_printf ("%s%06X", priv->playlist_path, g_random_int_range (0, 0xFFFFFF));
+	file = g_file_new_for_path (temp_uri);
 
 	parser = totem_pl_parser_new ();
-	if (rb_debug_matches ("totem_pl_parser_write_with_title", "totem-pl-parser.c")) {
+	playlist = totem_pl_playlist_new ();
+
+	data.source = source;
+	data.playlist = playlist;
+
+	gtk_tree_model_foreach (GTK_TREE_MODEL (query_model),
+				save_playlist_foreach,
+				&data);
+
+	if (rb_debug_matches ("totem_pl_parser_save", "totem-pl-parser.c")) {
 		g_object_set (parser, "debug", TRUE, NULL);
 	}
-	if (totem_pl_parser_write_with_title (parser,
-					      GTK_TREE_MODEL (query_model),
-					      (TotemPlParserIterFunc) save_playlist_entry,
-					      temp_uri,
-					      name,
-					      playlist_type,
-					      source,
-					      &error) == FALSE) {
+
+	if (totem_pl_parser_save (parser,
+				  playlist,
+				  file,
+				  name,
+				  playlist_type,
+				  &error) == FALSE) {
 		/* XXX report this more usefully */
 		g_warning ("Playlist save failed: %s", error->message);
 	} else {
 		GFile *dest;
-		GFile *src;
 
 		dest = g_file_new_for_path (priv->playlist_path);
-		src = g_file_new_for_path (temp_uri);
-		g_file_move (src, dest, G_FILE_COPY_OVERWRITE | G_FILE_COPY_NO_FALLBACK_FOR_MOVE, NULL, NULL, NULL, &error);
+		g_file_move (file, dest, G_FILE_COPY_OVERWRITE | G_FILE_COPY_NO_FALLBACK_FOR_MOVE, NULL, NULL, NULL, &error);
 		if (error != NULL) {
 			/* XXX report this more usefully */
 			g_warning ("Replacing playlist failed: %s", error->message);
 		}
 
 		g_object_unref (dest);
-		g_object_unref (src);
 	}
 
 	g_clear_error (&error);
 	g_free (name);
 	g_free (temp_uri);
 	g_object_unref (query_model);
+	g_object_unref (playlist);
+	g_object_unref (parser);
+	g_object_unref (file);
 
 	return FALSE;
 }
diff -urN sources/rb-playlist-source.c sources/rb-playlist-source.c
--- sources/rb-playlist-source.c
+++ sources/rb-playlist-source.c
@@ -544,31 +544,31 @@ rb_playlist_source_drop_cb (GtkWidget *widget,
 	gtk_drag_finish (context, TRUE, FALSE, time);
 }
 
-static void
-playlist_iter_func (GtkTreeModel *model,
-		    GtkTreeIter *iter,
-		    char **uri,
-		    char **title,
-		    gboolean *custom_title,
-		    gpointer user_data)
+static gboolean
+playlist_iter_foreach (GtkTreeModel *model,
+		       GtkTreePath *path,
+		       GtkTreeIter *iter,
+		       gpointer user_data)
 {
+	TotemPlPlaylist *playlist = user_data;
+	TotemPlPlaylistIter pl_iter;
 	RhythmDBEntry *entry;
+	const gchar *uri;
 
 	gtk_tree_model_get (model, iter, 0, &entry, -1);
 
-	if (uri != NULL) {
-		*uri = rhythmdb_entry_dup_string (entry, RHYTHMDB_PROP_LOCATION);
-	}
-	if (title != NULL) {
-		*title = rhythmdb_entry_dup_string (entry, RHYTHMDB_PROP_TITLE);
-	}
-	if (custom_title != NULL) {
-		*custom_title = FALSE;
-	}
+	uri = rhythmdb_entry_get_string (entry, RHYTHMDB_PROP_LOCATION);
+
+	totem_pl_playlist_append (playlist, &pl_iter);
+	totem_pl_playlist_set (playlist, &pl_iter,
+			       TOTEM_PL_PARSER_FIELD_URI, uri,
+			       NULL);
 
 	if (entry != NULL) {
 		rhythmdb_entry_unref (entry);
 	}
+
+	return FALSE;
 }
 
 /**
@@ -585,15 +585,19 @@ rb_playlist_source_save_playlist (RBPlaylistSource *source,
 				  const char *uri,
 				  RBPlaylistExportType export_type)
 {
-	TotemPlParser *playlist;
+	TotemPlParser *pl;
+	TotemPlPlaylist *playlist;
 	GError *error = NULL;
+	GFile *file;
 	char *name;
 	gint totem_format;
 
 	g_return_if_fail (RB_IS_PLAYLIST_SOURCE (source));
 
 	rb_debug ("saving playlist");
-	playlist = totem_pl_parser_new ();
+	pl = totem_pl_parser_new ();
+	playlist = totem_pl_playlist_new ();
+	file = g_file_new_for_uri (uri);
 
 	g_object_get (source, "name", &name, NULL);
 
@@ -610,12 +614,18 @@ rb_playlist_source_save_playlist (RBPlaylistSource *source,
 		break;
 	}
 
-	totem_pl_parser_write_with_title (playlist, GTK_TREE_MODEL (source->priv->model),
-					  playlist_iter_func, uri, name,
-					  totem_format,
-					  NULL, &error);
+	gtk_tree_model_foreach (GTK_TREE_MODEL (source->priv->model),
+				playlist_iter_foreach,
+				playlist);
+
+	totem_pl_parser_save (pl, playlist, file, name,
+			      totem_format, &error);
+
+	g_object_unref (pl);
 	g_object_unref (playlist);
+	g_object_unref (file);
 	g_free (name);
+
 	if (error != NULL) {
 		rb_error_dialog (NULL, _("Couldn't save playlist"),
 				 "%s", error->message);
